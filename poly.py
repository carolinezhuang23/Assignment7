"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Caroline Zhuang this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: cz7828
"""


class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    def __init__(self):
        # You are also welcome to use a sentinel/dummy node!
        # It is definitely recommended, which will we learn more
        # about in class on Monday 10/21. If you choose to use
        # a dummy node, you can comment out the self.head = None
        # and comment in the below line. We use None to make sure
        # if there is an error where you accidentally include the
        # dummy node in your calculation, it will throw an error.
        # self.dummy = Node(None, None)
        self.head = None
    def insert_term(self, coeff, exp):
        """
        Inserts term with coefficient coeff and exponent exp into the polynomial
        """
        if coeff == 0:
            return
        new_term = Node(coeff, exp)
        if self.head is None:
            self.head = new_term
            return
        if new_term.exp > self.head.exp:
            old_head = self.head
            self.head = new_term
            new_term.next = old_head
            return
        itr = self.head
        prev = None
        while itr is not None and itr.exp >= new_term.exp:
            if itr.exp == new_term.exp:
                itr.coeff += new_term.coeff
                if itr.coeff == 0:
                    if prev is None:
                        self.head = itr.next
                    else:
                        prev.next = itr.next
                return
            prev = itr
            itr = itr.next
        prev.next = new_term
        new_term.next = itr
    def add(self, p):
        """
        Add a polynomial p to the polynomial
        Returns resulting polynomial as a new linked list
        """
        poly1 = self.head
        poly2 = p.head
        addition = LinkedList()
        if poly1 is None and poly2 is None:
            return addition
        while poly1 is not None or poly2 is not None:
            if poly1 is None:
                addition.insert_term(poly2.coeff, poly2.exp)
                poly2 = poly2.next
            elif poly2 is None:
                addition.insert_term(poly1.coeff, poly1.exp)
                poly1 = poly1.next
            elif poly1.exp > poly2.exp:
                addition.insert_term(poly1.coeff, poly1.exp)
                poly1 = poly1.next
            elif poly1.exp < poly2.exp:
                addition.insert_term(poly2.coeff, poly2.exp)
                poly2 = poly2.next
            else:
                combined_coeff = poly1.coeff + poly2.coeff
                addition.insert_term(combined_coeff, poly1.exp)
                poly1 = poly1.next
                poly2 = poly2.next
        return addition
    def mult(self, p):
        """
        Multiply a polynomial p with the polynomial
        Returns product as new linked list
        """
        poly1 = self.head
        poly2 = p.head
        multiply = LinkedList()
        if poly1 is None or poly2 is None:
            return multiply
        while poly1 is not None:
            mult_coeff = poly1.coeff * poly2.coeff
            mult_exp = poly1.exp + poly2.exp
            if mult_coeff == 0:
                poly2 = poly2.next
            else:
                multiply.insert_term(mult_coeff, mult_exp)
                poly2 = poly2.next
            if poly2 is None:
                poly2 = p.head
                poly1 = poly1.next
        return multiply


    # Return a string representation of the polynomial.
    def __str__(self):
        """
        Returns a string representation of polynomial
        """
        itr = self.head
        string_list = []
        s = ""
        while itr:
            string_list.append(f"({itr.coeff}, {itr.exp})")
            itr = itr.next
        for i in range(len(string_list)):
            if i == len(string_list) - 1:
                s += string_list[i]
            else:
                s += string_list[i] + " + "
        return s

def main():
    """
    Main
    """
    # read data from stdin using input() and create polynomial p
    num1 = input()
    ll1 = LinkedList()
    for _ in range(int(num1)):
        num_list = input().split()
        temp_coeff = int(num_list[0])
        temp_exp = int(num_list[1])
        ll1.insert_term(temp_coeff, temp_exp)
    blank = input()
    # read data from stdin using input() and create polynomial q
    num2 = input()
    ll2 = LinkedList()
    for _ in range(int(num2)):
        num_list2 = input().split()
        temp_coeff2 = int(num_list2[0])
        temp_exp2 = int(num_list2[1])
        ll2.insert_term(temp_coeff2, temp_exp2)
    # get sum of p and q as a new linked list and print sum
    sum_pq = ll1.add(ll2)
    print(sum_pq)
    # get product of p and q as a new linked list and print product
    product_pq = ll1.mult(ll2)
    print(product_pq)


if __name__ == "__main__":
    main()
